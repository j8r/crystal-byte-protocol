crystal_doc_search_index_callback({"repository_name":"crystal-byte-protocol","body":"# Crystal Byte Protocol\n\n[![CI](https://github.com/j8r/crystal-byte-protocol/workflows/CI/badge.svg)](https://github.com/j8r/crystal-byte-protocol/actions?query=workflow%3ACI)\n[![Documentation](https://github.com/j8r/crystal-byte-protocol/workflows/Documentation/badge.svg)](https://j8r.github.io/crystal-byte-protocol)\n[![ISC](https://img.shields.io/badge/License-ISC-blue.svg?style=flat-square)](https://en.wikipedia.org/wiki/ISC_license)\n\n## Installation\n\nAdd the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  crystal-byte-protocol:\n    github: j8r/crystal-byte-protocol\n```\n\n## Documentation\n\nhttps://j8r.github.io/crystal-byte-protocol\n\n## Usage\n\nSee the [specs](./specs) to have concrete examples.\n\n### Generate JS protocol messages\n\nIn a `bin/gen-js-protocol-messages.cr` file:\n\n```cr\nrequire \"crystal-byte-protocol/crystal_to_js_byte_format\"\nrequire \"../src/protocol.cr\"\n\ndir = Path.new \"../web-client/js/protocol\"\n\nCrystalByteProtocol::CrystalToJS.convert_to_file(\n  dir / \"Client.js\",\n  MyApp::Protocol::Client\n)\n\nCrystalByteProtocol::CrystalToJS.convert_to_file(\n  dir / \"Server.js\",\n  MyApp::Protocol::Server\n)\n```\n\n### Use protocol messages in JS with WebSocket\n\nBe sure to set the WebSocket binaryType to `\"arraybuffer\"`\n\n```js\nconst socket = new WebSocket(address)\nsocket.binaryType = \"arraybuffer\"\n\nthis.socket.onmessage = (event) => {\n  const message = Server.deserialize(new ByteDecoder(event.data))\n  console.log(message)\n}\n\nconst object = new Client.MyObject\nsocket.send(Client.serialize(new ByteEncoder(), object))\n```\n\n## License\n\nCopyright (c) 2021 Julien Reichardt - ISC License\n","program":{"html_id":"crystal-byte-protocol/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"crystal-byte-protocol","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crystal-byte-protocol/CrystalByteProtocol","path":"CrystalByteProtocol.html","kind":"module","full_name":"CrystalByteProtocol","name":"CrystalByteProtocol","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/client.cr","line_number":3,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/client.cr#L3"}],"repository_name":"crystal-byte-protocol","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crystal-byte-protocol/CrystalByteProtocol/Client","path":"CrystalByteProtocol/Client.html","kind":"module","full_name":"CrystalByteProtocol::Client(C)","name":"Client","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/client.cr","line_number":3,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/client.cr#L3"}],"repository_name":"crystal-byte-protocol","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal-byte-protocol/CrystalByteProtocol","kind":"module","full_name":"CrystalByteProtocol","name":"CrystalByteProtocol"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"deserialize?(message:Bytes)-instance-method","html_id":"deserialize?(message:Bytes)-instance-method","name":"deserialize?","doc":"Deserialize the bytes message to an object. Returns `nil` if the first message byte does not match any type.","summary":"<p>Deserialize the bytes message to an object.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Bytes"}],"args_string":"(message : Bytes)","args_html":"(message : Bytes)","location":{"filename":"src/client.cr","line_number":5,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/client.cr#L5"},"def":{"name":"deserialize?","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if first = message[0]?\n  object_message = message[1, message.size - 1]\n  {% for type, i in C.constants %}\n      return Crystalizer::ByteFormat.deserialize(object_message, to: {{ C.constant(type.id) }}) if first == {{ i }}\n      {% end %}\nend"}}],"macros":[],"types":[]},{"html_id":"crystal-byte-protocol/CrystalByteProtocol/CrystalToJS","path":"CrystalByteProtocol/CrystalToJS.html","kind":"module","full_name":"CrystalByteProtocol::CrystalToJS","name":"CrystalToJS","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/crystal_to_js_byte_format.cr","line_number":5,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L5"}],"repository_name":"crystal-byte-protocol","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Types","name":"Types","value":"{String, Bool, Int8, UInt8, Int16, UInt16, Int32, UInt32, Float32, Float64}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal-byte-protocol/CrystalByteProtocol","kind":"module","full_name":"CrystalByteProtocol","name":"CrystalByteProtocol"},"doc":"Convert Crystal protocol messages to JavaScript, using the  https://github.com/j8r/js-byte-format library.","summary":"<p>Convert Crystal protocol messages to JavaScript, using the  https://github.com/j8r/js-byte-format library.</p>","class_methods":[{"id":"convert(io:IO,type:T.class,source_type:SourceType):NilforallT-class-method","html_id":"convert(io:IO,type:T.class,source_type:SourceType):NilforallT-class-method","name":"convert","doc":"Converts a type to JS.","summary":"<p>Converts a type to JS.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"}],"args_string":"(io : IO, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, source_type : SourceType) : Nil forall T","args_html":"(io : IO, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, source_type : <a href=\"../CrystalByteProtocol/CrystalToJS/SourceType.html\">SourceType</a>) : Nil forall T","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":119,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L119"},"def":{"name":"convert","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"type_name = type_last_name(T)\ninstance_vars = {{ T.instance_vars.empty? ? \"Array({String, Nil.class}).new\".id : T.instance_vars.map do |ivar|\n  {ivar.stringify, ivar.type}\nend }}\n((io << \"class \") << type_name) << \" {\\n\"\ncase source_type\nin .client?\n  io << \"  encode(byteEncoder) {\"\nin .server?\n  io << \"  constructor(byteDecoder) {\"\nend\ncase source_type\nin .client?\n  instance_vars.each do |name, ivar_type|\n    io << \"\\n    byteEncoder.write\"\n    case ivar_type\n    when Enum.class\n      io << (typeof(ivar_type.values.first.value)).name.downcase.camelcase\n      (((io << '(') << type_name) << '.') << (type_last_name(ivar_type))\n      ((io << \"[this.\") << name.camelcase(lower: true)) << \"])\"\n    when .in?(Types)\n      (((io << ivar_type.name.downcase.camelcase) << \"(this.\") << name.camelcase(lower: true)) << ')'\n    else\n      raise(Error.new(\"Unsupported type: #{ivar_type}\"))\n    end\n  end\nin .server?\n  instance_vars.each do |name, ivar_type|\n    ((io << \"\\n    this.\") << name.camelcase(lower: true)) << \" = \"\n    case ivar_type\n    when Enum.class\n      ((io << type_name) << '.') << (type_last_name(ivar_type))\n      ((io << \"[byteDecoder.read\") << (typeof(ivar_type.values.first.value)).name.downcase.camelcase) << \"()]\"\n    when .in?(Types)\n      ((io << \"byteDecoder.read\") << ivar_type.name.downcase.camelcase) << \"()\"\n    else\n      raise(Error.new(\"Unsupported type: #{ivar_type}\"))\n    end\n  end\nend\nio << (instance_vars.empty? ? \"}\\n}\" : \"\\n  }\\n}\")\ninstance_vars.each do |_, type|\n  if type.is_a?(Enum.class)\n    (((io << '\\n') << type_name) << '.') << (type_last_name(type))\n    convert_enum(io, type, source_type: source_type)\n  end\nend\n"}},{"id":"convert_all(io:IO,type:T.class,source_type:SourceType)forallT-class-method","html_id":"convert_all(io:IO,type:T.class,source_type:SourceType)forallT-class-method","name":"convert_all","doc":"Yiels each object name of `T` with its JS conversion. If the object contains others, they are also added.","summary":"<p>Yiels each object name of <code>T</code> with its JS conversion.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"}],"args_string":"(io : IO, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, source_type : SourceType) forall T","args_html":"(io : IO, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, source_type : <a href=\"../CrystalByteProtocol/CrystalToJS/SourceType.html\">SourceType</a>) forall T","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":31,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L31"},"def":{"name":"convert_all","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% for module_name in T.constants %}\n      {% module_const = T.constant(module_name) %}\n      io << \"export \"\n      convert io, {{ module_const }}, source_type: source_type\n\n      {% for obj_name in module_const.constants %}\n        {% obj_const = module_const.constant(obj_name) %}\n        io << \"\\n\\n\" \n        # Generate enums when iterating on ivars\n        {% if !(obj_const <= Enum) %}\n          convert io, {{ obj_const }}, source_type: source_type\n        {% end %}\n      {% end %}\n      io << '\\n'\n    {% end %}"}},{"id":"convert_enum(io:IO,type:Enum.class,source_type:SourceType,types:Bool=false):Nil-class-method","html_id":"convert_enum(io:IO,type:Enum.class,source_type:SourceType,types:Bool=false):Nil-class-method","name":"convert_enum","doc":"Converts an enum to JS.\nIf no name is defined, it is supposed to be a string enum of a message.","summary":"<p>Converts an enum to JS.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Enum.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"},{"name":"types","doc":null,"default_value":"false","external_name":"types","restriction":"Bool"}],"args_string":"(io : IO, type : <span class=\"t\">Enum</span>.<span class=\"k\">class</span>, source_type : SourceType, types : Bool = <span class=\"n\">false</span>) : Nil","args_html":"(io : IO, type : <span class=\"t\">Enum</span>.<span class=\"k\">class</span>, source_type : <a href=\"../CrystalByteProtocol/CrystalToJS/SourceType.html\">SourceType</a>, types : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":51,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L51"},"def":{"name":"convert_enum","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Enum.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"},{"name":"types","doc":null,"default_value":"false","external_name":"types","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << \" = Object.freeze({\"\ntype.each do |member, value|\n  io << \"\\n  \"\n  case source_type\n  in .client?\n    ((io << member) << \": \") << value\n  in .server?\n    (io << value) << \": \"\n    if !types\n      io << '\"'\n    end\n    io << member\n    if !types\n      io << '\"'\n    end\n  end\n  io << ','\nend\nio << \"\\n})\"\n"}},{"id":"convert_to_dict(io:IO,type:T.class,source_type:SourceType,types:Bool=false):NilforallT-class-method","html_id":"convert_to_dict(io:IO,type:T.class,source_type:SourceType,types:Bool=false):NilforallT-class-method","name":"convert_to_dict","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"},{"name":"types","doc":null,"default_value":"false","external_name":"types","restriction":"Bool"}],"args_string":"(io : IO, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, source_type : SourceType, types : Bool = <span class=\"n\">false</span>) : Nil forall T","args_html":"(io : IO, type : <span class=\"t\">T</span>.<span class=\"k\">class</span>, source_type : <a href=\"../CrystalByteProtocol/CrystalToJS/SourceType.html\">SourceType</a>, types : Bool = <span class=\"n\">false</span>) : Nil forall T","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":71,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L71"},"def":{"name":"convert_to_dict","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"},{"name":"source_type","doc":null,"default_value":"","external_name":"source_type","restriction":"SourceType"},{"name":"types","doc":null,"default_value":"false","external_name":"types","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"value = {{ T.constants.size <= UInt8::MAX ? 0_u8 : 0_u16 }}\nif source_type.server?\n  io << \"\\nconst Messages = Object.freeze({\"\nend\n({{ T.constants.map(&.stringify) }}).each do |member|\n  io << '\\n'\n  case source_type\n  in .client?\n    ((io << member) << \".protocolNumber = \") << value\n  in .server?\n    ((io << \"  \") << value) << \": \"\n    if !types\n      io << '\"'\n    end\n    io << member\n    if !types\n      io << '\"'\n    end\n    io << ','\n  end\n  value = value + 1\nend\ntype = value.class.to_s.downcase.camelcase\nif source_type.server?\n  io << \"\\n})\"\nend\nio << \"\\n\\nexport function \"\ncase source_type\nin .client?\n  io << \"serialize(byteEncoder, object) {\\n  byteEncoder.write#{type}(object.constructor.protocolNumber)\\n  object.encode(byteEncoder)\\n  return byteEncoder.toBytes()\\n}\"\nin .server?\n  io << \"deserialize(byteDecoder) {\\n  return new Messages[byteDecoder.read#{type}()](byteDecoder)\\n}\"\nend\n"}},{"id":"convert_to_file(file:Path|String,module_to_convert:M.class,file_path=__FILE__)forallM-class-method","html_id":"convert_to_file(file:Path|String,module_to_convert:M.class,file_path=__FILE__)forallM-class-method","name":"convert_to_file","doc":null,"summary":null,"abstract":false,"args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"Path | String"},{"name":"module_to_convert","doc":null,"default_value":"","external_name":"module_to_convert","restriction":"M.class"},{"name":"file_path","doc":null,"default_value":"__FILE__","external_name":"file_path","restriction":""}],"args_string":"(file : Path | String, module_to_convert : <span class=\"t\">M</span>.<span class=\"k\">class</span>, file_path = __FILE__) forall M","args_html":"(file : Path | String, module_to_convert : <span class=\"t\">M</span>.<span class=\"k\">class</span>, file_path = __FILE__) forall M","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":16,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L16"},"def":{"name":"convert_to_file","args":[{"name":"file","doc":null,"default_value":"","external_name":"file","restriction":"Path | String"},{"name":"module_to_convert","doc":null,"default_value":"","external_name":"module_to_convert","restriction":"M.class"},{"name":"file_path","doc":null,"default_value":"__FILE__","external_name":"file_path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"File.open(file, \"w\") do |io|\n  io.puts(\"// DO NOT EDIT: file auto-generated by #{File.basename(file_path)}.\")\n  source_type = module_to_convert.is_a?(Client) ? SourceType::Client : SourceType::Server\n  CrystalToJS.convert_all(io, M, source_type: source_type)\n  CrystalToJS.convert_to_dict(io, M, source_type, types: true)\n  io.puts\nend"}},{"id":"type_last_name(type)-class-method","html_id":"type_last_name(type)-class-method","name":"type_last_name","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"args_string":"(type)","args_html":"(type)","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":114,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L114"},"def":{"name":"type_last_name","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(type.name.rpartition(\"::\")).last"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"crystal-byte-protocol/CrystalByteProtocol/CrystalToJS/Error","path":"CrystalByteProtocol/CrystalToJS/Error.html","kind":"class","full_name":"CrystalByteProtocol::CrystalToJS::Error","name":"Error","abstract":false,"superclass":{"html_id":"crystal-byte-protocol/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"crystal-byte-protocol/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"crystal-byte-protocol/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crystal-byte-protocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_to_js_byte_format.cr","line_number":6,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L6"}],"repository_name":"crystal-byte-protocol","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal-byte-protocol/CrystalByteProtocol/CrystalToJS","kind":"module","full_name":"CrystalByteProtocol::CrystalToJS","name":"CrystalToJS"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"crystal-byte-protocol/CrystalByteProtocol/CrystalToJS/SourceType","path":"CrystalByteProtocol/CrystalToJS/SourceType.html","kind":"enum","full_name":"CrystalByteProtocol::CrystalToJS::SourceType","name":"SourceType","abstract":false,"superclass":null,"ancestors":[{"html_id":"crystal-byte-protocol/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"crystal-byte-protocol/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"crystal-byte-protocol/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"crystal-byte-protocol/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/crystal_to_js_byte_format.cr","line_number":11,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L11"}],"repository_name":"crystal-byte-protocol","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Client","name":"Client","value":"0","doc":null,"summary":null},{"id":"Server","name":"Server","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal-byte-protocol/CrystalByteProtocol/CrystalToJS","kind":"module","full_name":"CrystalByteProtocol::CrystalToJS","name":"CrystalToJS"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"client?-instance-method","html_id":"client?-instance-method","name":"client?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":12,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L12"},"def":{"name":"client?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Client"}},{"id":"server?-instance-method","html_id":"server?-instance-method","name":"server?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/crystal_to_js_byte_format.cr","line_number":13,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/crystal_to_js_byte_format.cr#L13"},"def":{"name":"server?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Server"}}],"macros":[],"types":[]}]},{"html_id":"crystal-byte-protocol/CrystalByteProtocol/Server","path":"CrystalByteProtocol/Server.html","kind":"module","full_name":"CrystalByteProtocol::Server(S)","name":"Server","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/server.cr","line_number":4,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L4"}],"repository_name":"crystal-byte-protocol","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal-byte-protocol/CrystalByteProtocol","kind":"module","full_name":"CrystalByteProtocol","name":"CrystalByteProtocol"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/server.cr","line_number":7,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L7"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"empty?:Bool-instance-method","html_id":"empty?:Bool-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/server.cr","line_number":25,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L25"},"def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@buffer.empty?"}},{"id":"log:Log-instance-method","html_id":"log:Log-instance-method","name":"log","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Log","args_html":" : Log","location":{"filename":"src/server.cr","line_number":5,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L5"},"def":{"name":"log","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Log","visibility":"Public","body":"@log"}},{"id":"log=(log:Log)-instance-method","html_id":"log=(log:Log)-instance-method","name":"log=","doc":null,"summary":null,"abstract":false,"args":[{"name":"log","doc":null,"default_value":"","external_name":"log","restriction":"Log"}],"args_string":"(log : Log)","args_html":"(log : Log)","location":{"filename":"src/server.cr","line_number":5,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L5"},"def":{"name":"log=","args":[{"name":"log","doc":null,"default_value":"","external_name":"log","restriction":"Log"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@log = log"}},{"id":"serialize(object:Message):Bytes-instance-method","html_id":"serialize(object:Message):Bytes-instance-method","name":"serialize","doc":"Serializes the `Message` to `Bytes`.\n\nThe bytes are a view of a buffer. If the method is called again, the buffer will change, and the bytes too.\nUse `#dup` to copy and avoid the side effect. Another solution is to use a pool.","summary":"<p>Serializes the <code><a href=\"../CrystalByteProtocol/Server/Message.html\">Message</a></code> to <code>Bytes</code>.</p>","abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":"Message"}],"args_string":"(object : Message) : Bytes","args_html":"(object : <a href=\"../CrystalByteProtocol/Server/Message.html\">Message</a>) : Bytes","location":{"filename":"src/server.cr","line_number":16,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L16"},"def":{"name":"serialize","args":[{"name":"object","doc":null,"default_value":"","external_name":"object","restriction":"Message"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"@log.trace do\n  object\nend\n@buffer.clear\n@byte_format.serialize(object.protocol_number)\n@byte_format.serialize(object)\n@buffer.to_slice\n"}}],"macros":[],"types":[{"html_id":"crystal-byte-protocol/CrystalByteProtocol/Server/Message","path":"CrystalByteProtocol/Server/Message.html","kind":"module","full_name":"CrystalByteProtocol::Server::Message","name":"Message","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/server.cr","line_number":29,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L29"}],"repository_name":"crystal-byte-protocol","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"crystal-byte-protocol/CrystalByteProtocol/Server","kind":"module","full_name":"CrystalByteProtocol::Server(S)","name":"Server"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"protocol_number:Int-instance-method","html_id":"protocol_number:Int-instance-method","name":"protocol_number","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Int","args_html":" : Int","location":{"filename":"src/server.cr","line_number":30,"url":"https://github.com/j8r/crystal-byte-protocol/blob/62fd9cdc34f686b6b267d5f13fd0c0b49677b3ce/src/server.cr#L30"},"def":{"name":"protocol_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":""}}],"macros":[],"types":[]}]}]}]}})